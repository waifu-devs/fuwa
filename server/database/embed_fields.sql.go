// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: embed_fields.sql

package database

import (
	"context"
)

const createEmbedField = `-- name: CreateEmbedField :one
INSERT INTO embed_fields (field_id, embed_id, name, value, inline)
VALUES (?, ?, ?, ?, ?)
RETURNING field_id, embed_id, name, value, inline
`

type CreateEmbedFieldParams struct {
	FieldID int64  `json:"field_id"`
	EmbedID int64  `json:"embed_id"`
	Name    string `json:"name"`
	Value   string `json:"value"`
	Inline  int64  `json:"inline"`
}

func (q *Queries) CreateEmbedField(ctx context.Context, arg CreateEmbedFieldParams) (EmbedField, error) {
	row := q.db.QueryRowContext(ctx, createEmbedField,
		arg.FieldID,
		arg.EmbedID,
		arg.Name,
		arg.Value,
		arg.Inline,
	)
	var i EmbedField
	err := row.Scan(
		&i.FieldID,
		&i.EmbedID,
		&i.Name,
		&i.Value,
		&i.Inline,
	)
	return i, err
}

const deleteEmbedField = `-- name: DeleteEmbedField :exec
DELETE FROM embed_fields
WHERE field_id = ?
`

func (q *Queries) DeleteEmbedField(ctx context.Context, fieldID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmbedField, fieldID)
	return err
}

const getEmbedFieldsByEmbedId = `-- name: GetEmbedFieldsByEmbedId :many
SELECT field_id, embed_id, name, value, inline FROM embed_fields
WHERE embed_id = ?
`

func (q *Queries) GetEmbedFieldsByEmbedId(ctx context.Context, embedID int64) ([]EmbedField, error) {
	rows, err := q.db.QueryContext(ctx, getEmbedFieldsByEmbedId, embedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmbedField
	for rows.Next() {
		var i EmbedField
		if err := rows.Scan(
			&i.FieldID,
			&i.EmbedID,
			&i.Name,
			&i.Value,
			&i.Inline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
