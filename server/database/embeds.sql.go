// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: embeds.sql

package database

import (
	"context"
	"database/sql"
)

const createEmbed = `-- name: CreateEmbed :one
INSERT INTO embeds (embed_id, message_id, title, description, url, color, thumbnail_url, image_url)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING embed_id, message_id, title, description, url, color, thumbnail_url, image_url
`

type CreateEmbedParams struct {
	EmbedID      int64          `json:"embed_id"`
	MessageID    string         `json:"message_id"`
	Title        sql.NullString `json:"title"`
	Description  sql.NullString `json:"description"`
	Url          sql.NullString `json:"url"`
	Color        sql.NullInt64  `json:"color"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	ImageUrl     sql.NullString `json:"image_url"`
}

func (q *Queries) CreateEmbed(ctx context.Context, arg CreateEmbedParams) (Embed, error) {
	row := q.db.QueryRowContext(ctx, createEmbed,
		arg.EmbedID,
		arg.MessageID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Color,
		arg.ThumbnailUrl,
		arg.ImageUrl,
	)
	var i Embed
	err := row.Scan(
		&i.EmbedID,
		&i.MessageID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Color,
		&i.ThumbnailUrl,
		&i.ImageUrl,
	)
	return i, err
}

const deleteEmbed = `-- name: DeleteEmbed :exec
DELETE FROM embeds
WHERE embed_id = ?
`

func (q *Queries) DeleteEmbed(ctx context.Context, embedID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmbed, embedID)
	return err
}

const getEmbed = `-- name: GetEmbed :one
SELECT embed_id, message_id, title, description, url, color, thumbnail_url, image_url FROM embeds
WHERE embed_id = ?
`

func (q *Queries) GetEmbed(ctx context.Context, embedID int64) (Embed, error) {
	row := q.db.QueryRowContext(ctx, getEmbed, embedID)
	var i Embed
	err := row.Scan(
		&i.EmbedID,
		&i.MessageID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Color,
		&i.ThumbnailUrl,
		&i.ImageUrl,
	)
	return i, err
}

const getEmbedsByMessageId = `-- name: GetEmbedsByMessageId :many
SELECT embed_id, message_id, title, description, url, color, thumbnail_url, image_url FROM embeds
WHERE message_id = ?
`

func (q *Queries) GetEmbedsByMessageId(ctx context.Context, messageID string) ([]Embed, error) {
	rows, err := q.db.QueryContext(ctx, getEmbedsByMessageId, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Embed
	for rows.Next() {
		var i Embed
		if err := rows.Scan(
			&i.EmbedID,
			&i.MessageID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Color,
			&i.ThumbnailUrl,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
