// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channels.sql

package database

import (
	"context"
	"database/sql"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at
`

type CreateChannelParams struct {
	ChannelID string         `json:"channel_id"`
	Name      string         `json:"name"`
	Type      int64          `json:"type"`
	ServerID  sql.NullString `json:"server_id"`
	ParentID  sql.NullString `json:"parent_id"`
	Metadata  sql.NullString `json:"metadata"`
	CreatedAt int64          `json:"created_at"`
	UpdatedAt int64          `json:"updated_at"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.ChannelID,
		arg.Name,
		arg.Type,
		arg.ServerID,
		arg.ParentID,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Channel
	err := row.Scan(
		&i.ChannelID,
		&i.Name,
		&i.Type,
		&i.ServerID,
		&i.ParentID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE channel_id = ?
`

func (q *Queries) DeleteChannel(ctx context.Context, channelID string) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, channelID)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at FROM channels
WHERE channel_id = ?
`

func (q *Queries) GetChannel(ctx context.Context, channelID string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, channelID)
	var i Channel
	err := row.Scan(
		&i.ChannelID,
		&i.Name,
		&i.Type,
		&i.ServerID,
		&i.ParentID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listChannels = `-- name: ListChannels :many
SELECT channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at FROM channels
WHERE (server_id = ? OR ? = '')
  AND (parent_id = ? OR ? = '')
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListChannelsParams struct {
	ServerID sql.NullString `json:"server_id"`
	Column2  interface{}    `json:"column_2"`
	ParentID sql.NullString `json:"parent_id"`
	Column4  interface{}    `json:"column_4"`
	Limit    int64          `json:"limit"`
	Offset   int64          `json:"offset"`
}

func (q *Queries) ListChannels(ctx context.Context, arg ListChannelsParams) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannels,
		arg.ServerID,
		arg.Column2,
		arg.ParentID,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ChannelID,
			&i.Name,
			&i.Type,
			&i.ServerID,
			&i.ParentID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChannelsByServerId = `-- name: ListChannelsByServerId :many
SELECT channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at FROM channels
WHERE server_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListChannelsByServerId(ctx context.Context, serverID sql.NullString) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannelsByServerId, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ChannelID,
			&i.Name,
			&i.Type,
			&i.ServerID,
			&i.ParentID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :one
UPDATE channels 
SET name = ?, metadata = ?, updated_at = ?
WHERE channel_id = ?
RETURNING channel_id, name, type, server_id, parent_id, metadata, created_at, updated_at
`

type UpdateChannelParams struct {
	Name      string         `json:"name"`
	Metadata  sql.NullString `json:"metadata"`
	UpdatedAt int64          `json:"updated_at"`
	ChannelID string         `json:"channel_id"`
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, updateChannel,
		arg.Name,
		arg.Metadata,
		arg.UpdatedAt,
		arg.ChannelID,
	)
	var i Channel
	err := row.Scan(
		&i.ChannelID,
		&i.Name,
		&i.Type,
		&i.ServerID,
		&i.ParentID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
