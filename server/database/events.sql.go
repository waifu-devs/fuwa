// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package database

import (
	"context"
	"database/sql"
	"strings"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence
`

type CreateEventParams struct {
	EventID   string         `json:"event_id"`
	EventType string         `json:"event_type"`
	Scope     string         `json:"scope"`
	ActorID   string         `json:"actor_id"`
	Timestamp int64          `json:"timestamp"`
	Payload   sql.NullString `json:"payload"`
	Metadata  sql.NullString `json:"metadata"`
	Sequence  int64          `json:"sequence"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.EventID,
		arg.EventType,
		arg.Scope,
		arg.ActorID,
		arg.Timestamp,
		arg.Payload,
		arg.Metadata,
		arg.Sequence,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventType,
		&i.Scope,
		&i.ActorID,
		&i.Timestamp,
		&i.Payload,
		&i.Metadata,
		&i.Sequence,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence FROM events
WHERE event_id = ?
`

func (q *Queries) GetEvent(ctx context.Context, eventID string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventType,
		&i.Scope,
		&i.ActorID,
		&i.Timestamp,
		&i.Payload,
		&i.Metadata,
		&i.Sequence,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence FROM events
WHERE scope = ?
  AND (event_type IN (/*SLICE:event_types*/?) OR /*SLICE:event_types*/? IS NULL)
  AND sequence >= ?
  AND sequence <= ?
ORDER BY sequence ASC
LIMIT ?
`

type GetEventsParams struct {
	Scope      string   `json:"scope"`
	EventTypes []string `json:"event_types"`
	Sequence   int64    `json:"sequence"`
	Sequence_2 int64    `json:"sequence_2"`
	Limit      int64    `json:"limit"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	query := getEvents
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Scope)
	if len(arg.EventTypes) > 0 {
		for _, v := range arg.EventTypes {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:event_types*/?", strings.Repeat(",?", len(arg.EventTypes))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:event_types*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Sequence)
	queryParams = append(queryParams, arg.Sequence_2)
	queryParams = append(queryParams, arg.Limit)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.EventType,
			&i.Scope,
			&i.ActorID,
			&i.Timestamp,
			&i.Payload,
			&i.Metadata,
			&i.Sequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByScope = `-- name: GetEventsByScope :many
SELECT event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence FROM events
WHERE scope = ?
ORDER BY sequence DESC
LIMIT ? OFFSET ?
`

type GetEventsByScopeParams struct {
	Scope  string `json:"scope"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) GetEventsByScope(ctx context.Context, arg GetEventsByScopeParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByScope, arg.Scope, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.EventType,
			&i.Scope,
			&i.ActorID,
			&i.Timestamp,
			&i.Payload,
			&i.Metadata,
			&i.Sequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByTypeAndScope = `-- name: GetEventsByTypeAndScope :many
SELECT event_id, event_type, scope, actor_id, timestamp, payload, metadata, sequence FROM events
WHERE event_type = ? AND scope = ?
ORDER BY sequence DESC
LIMIT ?
`

type GetEventsByTypeAndScopeParams struct {
	EventType string `json:"event_type"`
	Scope     string `json:"scope"`
	Limit     int64  `json:"limit"`
}

func (q *Queries) GetEventsByTypeAndScope(ctx context.Context, arg GetEventsByTypeAndScopeParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByTypeAndScope, arg.EventType, arg.Scope, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.EventType,
			&i.Scope,
			&i.ActorID,
			&i.Timestamp,
			&i.Payload,
			&i.Metadata,
			&i.Sequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestSequence = `-- name: GetLatestSequence :one
SELECT COALESCE(MAX(sequence), 0) as max_sequence
FROM events
WHERE scope = ?
`

func (q *Queries) GetLatestSequence(ctx context.Context, scope string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getLatestSequence, scope)
	var max_sequence interface{}
	err := row.Scan(&max_sequence)
	return max_sequence, err
}
