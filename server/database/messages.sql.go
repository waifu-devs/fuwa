// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id
`

type CreateMessageParams struct {
	MessageID string         `json:"message_id"`
	ChannelID string         `json:"channel_id"`
	AuthorID  string         `json:"author_id"`
	Content   string         `json:"content"`
	CreatedAt int64          `json:"created_at"`
	UpdatedAt int64          `json:"updated_at"`
	ReplyToID sql.NullString `json:"reply_to_id"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.MessageID,
		arg.ChannelID,
		arg.AuthorID,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ReplyToID,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReplyToID,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE message_id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, messageID string) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, messageID)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id FROM messages
WHERE message_id = ?
`

func (q *Queries) GetMessage(ctx context.Context, messageID string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, messageID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReplyToID,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id FROM messages
WHERE channel_id = ?
  AND (created_at < ? OR ? = 0)
  AND (created_at > ? OR ? = 0)
ORDER BY created_at DESC
LIMIT ?
`

type GetMessagesParams struct {
	ChannelID   string      `json:"channel_id"`
	CreatedAt   int64       `json:"created_at"`
	Column3     interface{} `json:"column_3"`
	CreatedAt_2 int64       `json:"created_at_2"`
	Column5     interface{} `json:"column_5"`
	Limit       int64       `json:"limit"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages,
		arg.ChannelID,
		arg.CreatedAt,
		arg.Column3,
		arg.CreatedAt_2,
		arg.Column5,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.ChannelID,
			&i.AuthorID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReplyToID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByChannelId = `-- name: GetMessagesByChannelId :many
SELECT message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id FROM messages
WHERE channel_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetMessagesByChannelIdParams struct {
	ChannelID string `json:"channel_id"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

func (q *Queries) GetMessagesByChannelId(ctx context.Context, arg GetMessagesByChannelIdParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByChannelId, arg.ChannelID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.ChannelID,
			&i.AuthorID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReplyToID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET content = ?, updated_at = ?
WHERE message_id = ?
RETURNING message_id, channel_id, author_id, content, created_at, updated_at, reply_to_id
`

type UpdateMessageParams struct {
	Content   string `json:"content"`
	UpdatedAt int64  `json:"updated_at"`
	MessageID string `json:"message_id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.Content, arg.UpdatedAt, arg.MessageID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReplyToID,
	)
	return i, err
}
